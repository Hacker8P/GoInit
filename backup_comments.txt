/* func WaitForTerminate(process *exec.Cmd, name string) {
	// Wait for the process's ending

	err := process.Wait()

	if err == nil {
		lmd.LogTime(false, "Process %v with PID %v terminated ", []any{name, strconv.Itoa(process.Process.Pid)})
	} else {
		lmd.LogTime(true, "Process %v with PID %v exited ", []any{name, strconv.Itoa(process.Process.Pid)})
	}
}

func StartProcess(name string, command string, args []string, stdout *os.File, stderr *os.File) {
	proc := exec.Command(command, args...)

	// Stdout and Stderr

	proc.Stdout = stdout
	proc.Stderr = stderr

	// Starting the process

	err := proc.Start()

	// Log the starting

	ctime := time.Now()

	timec := fmt.Sprintf("%d/%d/%d %d:%d:%d", ctime.Day(), ctime.Month(), ctime.Year(), ctime.Hour(), ctime.Minute(), ctime.Second())

	lmd.Log(false, fmt.Sprintf("Process %v with PID %v started at %v", command, proc.Process.Pid, timec))

	// Checking errors

	lmd.Log(err != nil, err)

	// go func() {err = proc.Wait(); log(err != nil, err)}()

	go WaitForTerminate(proc, command)
} */

/* func assert_data(data interface{}, asserter any) {
	asrt, may := data.(asserter)

} */

/* func read_services(directory string) {
	dir, _ := os.ReadDir(directory + "services")
	for _, path := range dir {
		if !path.IsDir() {
			file := directory + "services/" + path.Name()
			fl, _ := os.ReadFile(file)
			var tmap map[string]interface{}
			json.Unmarshal(fl, &tmap)
			services_files = append(services_files, tmap)
		}
	}
} */

// func write_a_service_log()

/* func log(is_a_err bool, logv interface{}) {
	if logv == nil {
		return
	}
	if is_a_err {
		fmt.Print("[ ")
		color.RGB(255, 0, 0).Print("ERROR")
		fmt.Print(" ] ")
		/* _, c := i.(error)
		if c {
			fmt.Println("NOT AN ERROR")
			fmt.Fprintln(os.Stderr, "Failed wlogv)
		} */ /*
		fmt.Fprintln(os.Stderr, logv)
	} else {
		fmt.Print("[ ")
		color.RGB(0, 255, 0).Print("OK")
		fmt.Print(" ] ")
		fmt.Println(logv)
	}
}

func log_inline(is_a_err bool, logv interface{}) {
	if is_a_err {
		fmt.Fprint(os.Stderr, logv)
	} else {
		fmt.Print(logv)
	}
}

func log_time(is_a_err bool, logv string, args []any) {
	ctime := time.Now()

	timec := fmt.Sprintf("%d/%d/%d %d:%d:%d", ctime.Day(), ctime.Month(), ctime.Year(), ctime.Hour(), ctime.Minute(), ctime.Second())

	args = append(args, timec)

	if is_a_err {
		log(true, fmt.Sprintf(logv+"at %v", args...))
	} else {
		log(false, fmt.Sprintf(logv+"at %v", args...))
	}
} */

/* func communicate(message string) {
	r, _ := os.OpenFile("/tmp/goinit_fifo", os.O_WRONLY, os.ModeNamedPipe)
	r.Write([]byte(message))
	defer r.Close()
} */

/* func read_services(directory string, services *[]map[string]interface{}) {
	dir, _ := os.ReadDir(directory + "services")
	for _, path := range dir {
		if !path.IsDir() {
			file := directory + "services/" + path.Name()
			fl, _ := os.ReadFile(file)
			var tmap map[string]interface{}
			json.Unmarshal(fl, &tmap)
			*services = append(*services, tmap)
		}
	}
} */

// import "os/signal"

// import "syscall"